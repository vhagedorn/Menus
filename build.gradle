plugins {
    id 'java'
    id 'maven-publish'
    id 'com.github.johnrengelman.shadow' version '7.0.0'
    id 'org.jetbrains.kotlin.jvm' version '1.8.22'
}

group 'me.vadim.util.menus'
version '1.0.0'

def name_jar = project.name + '.jar'
def main_cls = project.group + '.Menus'
def java_ver = '17'

project.buildDir = 'target/'

repositories {
    mavenCentral()
    mavenLocal()
    jcenter()

    maven { url 'https://papermc.io/repo/repository/maven-public/' }
    maven { url 'https://repo.aikar.co/content/groups/aikar/' }
    maven { url 'https://hub.spigotmc.org/nexus/content/groups/public/' }
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
    maven { url 'https://oss.sonatype.org/content/repositories/central' }
    maven { url 'https://jitpack.io' }
}

dependencies {
//    compileOnly 'gg.airplane:airplane-api:1.17.1-R0.1-SNAPSHOT'
    compileOnly 'io.papermc.paper:paper-api:1.17.1-R0.1-SNAPSHOT'
}

shadowJar {
    archiveFileName.set(name_jar)
    destinationDirectory.set(project.buildDir)
    mergeServiceFiles()
    minimize()
    manifest {
        attributes('Main-Class': main_cls)
    }
}

build {
    dependsOn(shadowJar)
}

processResources {
    filesMatching('plugin.yml') {
        expand('version': project.version, 'name': project.name, 'main': main_cls)
    }
}

compileKotlin {
    kotlinOptions {
        jvmTarget = java_ver
        freeCompilerArgs = ['-Xjvm-default=all']
    }
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(java_ver)
    }
}

jar {
    destinationDirectory.set(project.buildDir)
    archiveFileName.set(project.name + '-' + project.version + '-unshaded.jar')
}

tasks.register("sourceJar", Jar) {
    from(sourceSets.main.allSource)
    archiveClassifier.set("sources")
//    classifier = "sources"
}

publishing {
    publications {
        maven(MavenPublication) {
            version = project.version.toString()
            groupId = project.group.toString()

            from components["kotlin"]

            afterEvaluate {
                artifactId = tasks.jar.archiveBaseName.get()
            }

            artifact(sourceJar)
        }
    }
}